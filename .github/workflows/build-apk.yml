name: Build Android APK

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Позволяет запускать вручную

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Free Disk Space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h
    
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk wget
        sudo apt-get install -y python3-pip autoconf libtool pkg-config
        sudo apt-get install -y zlib1g-dev libncurses-dev libncursesw5-dev
        sudo apt-get install -y cmake libffi-dev libssl-dev
        sudo apt-get install -y build-essential ccache libltdl-dev
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
        sudo apt-get install -y libfreetype6-dev libpng-dev libjpeg-dev
        sudo apt-get install -y libgles2-mesa-dev libgstreamer1.0-dev
        sudo apt-get install -y libsdl2-2.0-0 libsdl2-dev libsdl2-image-dev
        sudo apt-get install -y libsdl2-mixer-dev libsdl2-ttf-dev
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
    
    - name: Cache Buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
    
    - name: Install Buildozer and dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        pip install buildozer==1.5.0
        pip install cython==0.29.36
        pip install virtualenv
    
    - name: Verify buildozer.spec exists
      run: |
        if [ ! -f buildozer.spec ]; then
          echo "Error: buildozer.spec not found!"
          exit 1
        fi
        echo "=== buildozer.spec content ==="
        cat buildozer.spec
    
    - name: Setup Android SDK
      run: |
        set -e
        mkdir -p ~/.buildozer/android/platform/android-sdk
        cd ~/.buildozer/android/platform
        
        # Download and install cmdline-tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip
        mkdir -p android-sdk/cmdline-tools
        mv cmdline-tools android-sdk/cmdline-tools/latest
        
        # Set up environment
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH
        
        # Accept licenses
        mkdir -p android-sdk/licenses
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > android-sdk/licenses/android-sdk-license
        echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> android-sdk/licenses/android-sdk-license
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > android-sdk/licenses/android-sdk-preview-license
        
        # Install required SDK components
        yes | sdkmanager --sdk_root=$ANDROID_HOME "platform-tools" "platforms;android-31" "build-tools;34.0.0"
        
        # Create legacy tools structure for buildozer compatibility
        mkdir -p android-sdk/tools/bin
        ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager android-sdk/tools/bin/sdkmanager
        ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager android-sdk/tools/bin/avdmanager
        
        echo "Android SDK setup completed"
        ls -la android-sdk/tools/bin/ || true
    
    - name: Check SDL2 libraries
      run: |
        echo "Checking SDL2 libraries..."
        ldconfig -p | grep -i sdl2
        pkg-config --libs sdl2
        
        echo "Checking system package directories..."
        ls -la /usr/lib/x86_64-linux-gnu/libSDL2* || true
        ls -la /usr/include/SDL2/ || true
    
    - name: Build APK with Buildozer
      run: |
        # Configure ccache
        export CCACHE_DIR=$HOME/.ccache
        export USE_CCACHE=1
        ccache -M 2G
        
        # Print buildozer config
        echo "Buildozer configuration:"
        cat buildozer.spec
        
        # Build
        buildozer -v android debug
      timeout-minutes: 60
      env:
        BUILDOZER_WARN_ON_ROOT: 0
        ANDROID_SDK_ROOT: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
        ANDROID_HOME: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
        USE_CCACHE: 1
        NDK_CCACHE: ccache

    - name: Dump Buildozer logs
      if: failure()
      run: |
        set +e
        BASE=.buildozer/android/platform/build-arm64-v8a
        echo "=== Available log files ==="
        find .buildozer -maxdepth 5 -type f -name "*.log" -print || true
        if [ -f "$BASE/build.log" ]; then
          echo "=== build.log (last 400 lines) ==="
          tail -n 400 "$BASE/build.log"
        else
          echo "build.log not found"
        fi
        if [ -f "$BASE/logs/python-for-android.log" ]; then
          echo "=== python-for-android.log (last 400 lines) ==="
          tail -n 400 "$BASE/logs/python-for-android.log"
        fi
        if [ -f "$BASE/logs/hostpython.log" ]; then
          echo "=== hostpython.log (last 200 lines) ==="
          tail -n 200 "$BASE/logs/hostpython.log"
        fi
        if [ -d "$BASE/obj" ]; then
          echo "=== Recent compiler errors (grep -i error) ==="
          grep -RIn "error:" "$BASE/obj" | tail -n 40 || true
        fi

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-logs
        path: |
          .buildozer/android/platform/build-arm64-v8a/build.log
          .buildozer/android/platform/build-arm64-v8a/logs/
        retention-days: 7

    - name: Upload build workspace
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-workdir
        path: .buildozer/android/platform/build-arm64-v8a/
        retention-days: 7

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: snake-game-apk
        path: bin/*.apk
        retention-days: 30
    
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0-${{ github.run_number }}
        name: Snake Game v1.0 Build ${{ github.run_number }}
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
