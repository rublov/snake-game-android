#!/bin/bash
# ==============================================================================
# –°–ö–†–ò–ü–¢ –î–õ–Ø –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ô –°–ë–û–†–ö–ò APK –ß–ï–†–ï–ó DOCKER (Linux/Mac)
# ==============================================================================
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./build-apk.sh              # –û–±—ã—á–Ω–∞—è —Å–±–æ—Ä–∫–∞
#   ./build-apk.sh --clean      # –°–±–æ—Ä–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
#   ./build-apk.sh --no-build   # –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑, –Ω–µ —Å–æ–±–∏—Ä–∞—Ç—å APK
#   ./build-apk.sh --use-cache  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à Docker (–±—ã—Å—Ç—Ä–µ–µ)
# ==============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

function print_success() { echo -e "${GREEN}$1${NC}"; }
function print_info() { echo -e "${CYAN}$1${NC}"; }
function print_warning() { echo -e "${YELLOW}$1${NC}"; }
function print_error() { echo -e "${RED}$1${NC}"; }

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
CLEAN_BUILD=0
NO_BUILD=0
USE_CACHE=1

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --clean)
            CLEAN_BUILD=1
            shift
            ;;
        --no-build)
            NO_BUILD=1
            shift
            ;;
        --use-cache)
            USE_CACHE=0
            shift
            ;;
        *)
            print_error "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [--clean] [--no-build] [--use-cache]"
            exit 1
            ;;
    esac
done

print_info "========================================="
print_info "üöÄ Snake Game APK Builder"
print_info "========================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
print_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if ! command -v docker &> /dev/null; then
    print_error "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    print_error "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
    exit 1
fi

DOCKER_VERSION=$(docker --version)
print_success "‚úÖ Docker –Ω–∞–π–¥–µ–Ω: $DOCKER_VERSION"
echo ""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞
IMAGE_NAME="snakegame-builder"
CONTAINER_NAME="snakegame-build"

# –®–∞–≥ 1: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
print_info "========================================="
print_info "üì¶ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞"
print_info "========================================="

DOCKER_BUILD_ARGS="build -f Dockerfile.production -t $IMAGE_NAME"

if [ $USE_CACHE -eq 1 ]; then
    DOCKER_BUILD_ARGS="$DOCKER_BUILD_ARGS --no-cache"
    print_warning "‚ö†Ô∏è  –ö—ç—à Docker –æ—Ç–∫–ª—é—á–µ–Ω (—Å–±–æ—Ä–∫–∞ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)"
fi

DOCKER_BUILD_ARGS="$DOCKER_BUILD_ARGS ."

print_info "–ö–æ–º–∞–Ω–¥–∞: docker $DOCKER_BUILD_ARGS"
echo ""

if ! docker $DOCKER_BUILD_ARGS; then
    print_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Docker –æ–±—Ä–∞–∑–∞"
    exit 1
fi

print_success "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
echo ""

# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ NO_BUILD, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
if [ $NO_BUILD -eq 1 ]; then
    print_success "‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω. –°–±–æ—Ä–∫–∞ APK –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Ñ–ª–∞–≥ --no-build)"
    exit 0
fi

# –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ APK
print_info "========================================="
print_info "üî® –®–∞–≥ 2: –°–±–æ—Ä–∫–∞ APK"
print_info "========================================="

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
print_info "üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker rm -f $CONTAINER_NAME 2>/dev/null || true

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV_VARS=""
if [ $CLEAN_BUILD -eq 1 ]; then
    ENV_VARS="-e CLEAN_BUILD=1"
    print_warning "‚ö†Ô∏è  –†–µ–∂–∏–º CLEAN BUILD –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
fi

# –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏
print_info "üèóÔ∏è  –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
echo ""

if ! docker run --name $CONTAINER_NAME -v "$(pwd):/app" $ENV_VARS $IMAGE_NAME; then
    print_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ APK"
    print_warning "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: buildozer_full.log"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏
    print_info "üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤..."
    docker cp "$CONTAINER_NAME:/app/buildozer_full.log" "./buildozer_full.log" 2>/dev/null || true
    
    exit 1
fi

echo ""
print_success "‚úÖ APK —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"

# –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ APK
print_info ""
print_info "========================================="
print_info "üì¶ –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ APK"
print_info "========================================="

# –ö–æ–ø–∏—Ä—É–µ–º bin –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
print_info "üì• –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
if ! docker cp "$CONTAINER_NAME:/app/bin" "./bin"; then
    print_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ APK –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ APK
if ls ./bin/*.apk 1> /dev/null 2>&1; then
    echo ""
    print_success "========================================="
    print_success "üéâ –£–°–ü–ï–®–ù–û! APK –ì–û–¢–û–í!"
    print_success "========================================="
    echo ""
    
    for apk in ./bin/*.apk; do
        SIZE=$(du -h "$apk" | cut -f1)
        print_info "üì± –§–∞–π–ª: $(basename "$apk")"
        print_info "   –†–∞–∑–º–µ—Ä: $SIZE"
        print_info "   –ü—É—Ç—å: $apk"
    done
    
    echo ""
    print_success "‚úÖ APK –≥–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!"
    print_info "üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: adb install bin/*.apk"
else
    print_warning "‚ö†Ô∏è  APK —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ bin/"
fi

# –û—á–∏—Å—Ç–∫–∞
echo ""
print_info "üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
docker rm -f $CONTAINER_NAME 2>/dev/null || true

echo ""
print_success "========================================="
print_success "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω"
print_success "========================================="
